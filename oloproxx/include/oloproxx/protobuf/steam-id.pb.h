// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steam-id.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steam_2did_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steam_2did_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steam_2did_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steam_2did_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steam_2did_2eproto;
namespace app {
namespace users {
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace users
}  // namespace app
PROTOBUF_NAMESPACE_OPEN
template<> ::app::users::User* Arena::CreateMaybeMessage<::app::users::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace app {
namespace users {

// ===================================================================

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:app.users.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit PROTOBUF_CONSTEXPR User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "app.users.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 5,
    kNameFieldNumber = 3,
    kSteamidKeyFieldNumber = 1,
    kSteamidFieldNumber = 2,
    kRatingFieldNumber = 4,
  };
  // repeated int64 friends = 5;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  private:
  int64_t _internal_friends(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_friends() const;
  void _internal_add_friends(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_friends();
  public:
  int64_t friends(int index) const;
  void set_friends(int index, int64_t value);
  void add_friends(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      friends() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_friends();

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 steamid_key = 1;
  void clear_steamid_key();
  int64_t steamid_key() const;
  void set_steamid_key(int64_t value);
  private:
  int64_t _internal_steamid_key() const;
  void _internal_set_steamid_key(int64_t value);
  public:

  // int64 steamid = 2;
  void clear_steamid();
  int64_t steamid() const;
  void set_steamid(int64_t value);
  private:
  int64_t _internal_steamid() const;
  void _internal_set_steamid(int64_t value);
  public:

  // double rating = 4;
  void clear_rating();
  double rating() const;
  void set_rating(double value);
  private:
  double _internal_rating() const;
  void _internal_set_rating(double value);
  public:

  // @@protoc_insertion_point(class_scope:app.users.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > friends_;
    mutable std::atomic<int> _friends_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t steamid_key_;
    int64_t steamid_;
    double rating_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steam_2did_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// int64 steamid_key = 1;
inline void User::clear_steamid_key() {
  _impl_.steamid_key_ = int64_t{0};
}
inline int64_t User::_internal_steamid_key() const {
  return _impl_.steamid_key_;
}
inline int64_t User::steamid_key() const {
  // @@protoc_insertion_point(field_get:app.users.User.steamid_key)
  return _internal_steamid_key();
}
inline void User::_internal_set_steamid_key(int64_t value) {
  
  _impl_.steamid_key_ = value;
}
inline void User::set_steamid_key(int64_t value) {
  _internal_set_steamid_key(value);
  // @@protoc_insertion_point(field_set:app.users.User.steamid_key)
}

// int64 steamid = 2;
inline void User::clear_steamid() {
  _impl_.steamid_ = int64_t{0};
}
inline int64_t User::_internal_steamid() const {
  return _impl_.steamid_;
}
inline int64_t User::steamid() const {
  // @@protoc_insertion_point(field_get:app.users.User.steamid)
  return _internal_steamid();
}
inline void User::_internal_set_steamid(int64_t value) {
  
  _impl_.steamid_ = value;
}
inline void User::set_steamid(int64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:app.users.User.steamid)
}

// string name = 3;
inline void User::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:app.users.User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:app.users.User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:app.users.User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return _impl_.name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:app.users.User.name)
  return _impl_.name_.Release();
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:app.users.User.name)
}

// double rating = 4;
inline void User::clear_rating() {
  _impl_.rating_ = 0;
}
inline double User::_internal_rating() const {
  return _impl_.rating_;
}
inline double User::rating() const {
  // @@protoc_insertion_point(field_get:app.users.User.rating)
  return _internal_rating();
}
inline void User::_internal_set_rating(double value) {
  
  _impl_.rating_ = value;
}
inline void User::set_rating(double value) {
  _internal_set_rating(value);
  // @@protoc_insertion_point(field_set:app.users.User.rating)
}

// repeated int64 friends = 5;
inline int User::_internal_friends_size() const {
  return _impl_.friends_.size();
}
inline int User::friends_size() const {
  return _internal_friends_size();
}
inline void User::clear_friends() {
  _impl_.friends_.Clear();
}
inline int64_t User::_internal_friends(int index) const {
  return _impl_.friends_.Get(index);
}
inline int64_t User::friends(int index) const {
  // @@protoc_insertion_point(field_get:app.users.User.friends)
  return _internal_friends(index);
}
inline void User::set_friends(int index, int64_t value) {
  _impl_.friends_.Set(index, value);
  // @@protoc_insertion_point(field_set:app.users.User.friends)
}
inline void User::_internal_add_friends(int64_t value) {
  _impl_.friends_.Add(value);
}
inline void User::add_friends(int64_t value) {
  _internal_add_friends(value);
  // @@protoc_insertion_point(field_add:app.users.User.friends)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
User::_internal_friends() const {
  return _impl_.friends_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
User::friends() const {
  // @@protoc_insertion_point(field_list:app.users.User.friends)
  return _internal_friends();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
User::_internal_mutable_friends() {
  return &_impl_.friends_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
User::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:app.users.User.friends)
  return _internal_mutable_friends();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace users
}  // namespace app

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steam_2did_2eproto
